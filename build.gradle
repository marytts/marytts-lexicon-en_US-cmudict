plugins {
    id 'de.dfki.mary.lexicon-compiler' version '0.2.0'
    id 'maven-publish'
}

group 'de.dfki.mary'
version '0.2.0-SNAPSHOT'

repositories {
    maven {
        url 'https://dl.bintray.com/marytts/marytts'
    }
    ivy {
        url 'http://festvox.org/packed/festival/2.4/'
        allowInsecureProtocol = true
        patternLayout {
            artifact '[module]_[classifier].[ext]'
        }
        metadataSources {
            artifact()
        }
    }
    ivy {
        url 'https://www.cstr.ed.ac.uk/downloads/festival/2.4/'
        patternLayout {
            artifact '[module]_[classifier].[ext]'
        }
        metadataSources {
            artifact()
        }
    }
}

configurations {
    cmudict
}

dependencies {
    cmudict group: 'org.festvox', name: 'festlex', version: '0.4', classifier: 'CMU', ext: 'tar.gz'
}

task copyCmuDict(type: Copy) {
    from configurations.cmudict
    into "$buildDir/cmudict-packed"
}

task unpackCmuDict(type: Copy) {
    dependsOn copyCmuDict
    from tarTree(file("$copyCmuDict.destinationDir/festlex-0.4-CMU.tar.gz"))
    into "$buildDir/cmudict"
    include '**/cmudict-0.4.scm', '**/cmudict_extensions.scm', '**/COPYING'
    eachFile {
        it.path = it.name
    }
    includeEmptyDirs = false
}

task processCmuDict {
    dependsOn unpackCmuDict
    ext.destFile = file("$unpackCmuDict.destinationDir/cmudict.txt")
    outputs.file destFile
    doLast {
        def phoneMapping = [:]
        file('modules/en/synthesis/sampa2mrpa_en.map').eachLine { line ->
            (line =~ /(.+)<->(.+)/).each { match, sampa, mrpa ->
                phoneMapping[mrpa] = sampa
            }
        }
        def stressMapping = [
                '1': "'",
                '2': ','
        ]
        def allophoneSetFile = file('modules/en/us/lexicon/allophones.en_US.xml')
        def allophoneSet = marytts.modules.phonemiser.AllophoneSet.getAllophoneSet(allophoneSetFile.path)
        destFile.withWriter { dest ->
            fileTree(unpackCmuDict.destinationDir).include('*.scm').each { scmFile ->
                scmFile.eachLine('UTF-8') { line ->
                    (line =~ /\("(\w+)" (\w+) \((.+)\)\)/).each { match, lemma, pos, transcription ->
                        def transcriptionMapped = transcription.replaceAll(~/\b(\S+?)([0-2])?\b/, { all, phone, stress ->
                            def mappedPhone = phoneMapping[phone] ?: phone
                            def mappedStress = stressMapping[stress] ?: ''
                            mappedStress + mappedPhone
                        })
                        def transcriptionSyllabified = allophoneSet.syllabify(transcriptionMapped)
                        def transcriptionNoSpaces = transcriptionSyllabified.replaceAll(' ', '')
                        dest.println "$lemma $transcriptionNoSpaces"
                    }
                }
            }
        }
    }
}

compileLexicon {
    dependsOn processCmuDict
    allophonesFile = file('modules/en/us/lexicon/allophones.en_US.xml')
    lexiconFile = processCmuDict.destFile
}

processResources {
    from unpackCmuDict, {
        include 'COPYING'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
    repositories {
        maven {
            url "$rootProject.buildDir/repo"
        }
        maven {
            url version.endsWith('-SNAPSHOT') ? 'https://oss.jfrog.org/artifactory/oss-snapshot-local' : 'https://api.bintray.com/maven/marytts/marytts/marytts'
            credentials {
                username = findProperty('bintrayUser')
                password = findProperty('bintrayApiKey')
            }
        }
    }
}
