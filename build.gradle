buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.de.dfki.mary:gradle-marytts-lexicon-compiler-plugin:0.1.0"
    }
}

group 'de.dfki.mary'
version '0.1.0-SNAPSHOT'

repositories {
    ivy {
        url 'http://festvox.org/packed/festival/2.4/'
        layout 'pattern', {
            artifact '[module]_[classifier].[ext]'
        }
    }
    ivy {
        url 'http://www.cstr.ed.ac.uk/downloads/festival/2.4/'
        layout 'pattern', {
            artifact '[module]_[classifier].[ext]'
        }
    }
}

configurations {
    cmudict
}

dependencies {
    cmudict group: 'org.festvox', name: 'festlex', version: '0.4', classifier: 'CMU', ext: 'tar.gz'
}

task copyCmuDict(type: Copy) {
    from configurations.cmudict
    into "$buildDir/cmudict-packed"
}

task unpackCmuDict(type: Copy) {
    dependsOn copyCmuDict
    from tarTree(file("$copyCmuDict.destinationDir/festlex-0.4-CMU.tar.gz"))
    into "$buildDir/cmudict"
    include '**/cmudict-0.4.scm', '**/cmudict_extensions.scm', '**/COPYING'
    eachFile {
        it.path = it.name
    }
    includeEmptyDirs = false
}

task processCmuDict {
    dependsOn unpackCmuDict
    ext.destFile = file("$unpackCmuDict.destinationDir/cmudict.txt")
    outputs.file destFile
    doLast {
        destFile.withWriter { dest ->
            fileTree(unpackCmuDict.destinationDir).include('*.scm').each { scmFile ->
                scmFile.eachLine('UTF-8') { line ->
                    (line =~ /\("(\w+)" (\w+) \((.+)\)\)/).each { match, lemma, pos, transcription ->
                        dest.println "$lemma ${transcription.replaceAll(' ', '')}"
                    }
                }
            }
        }
    }
}

ext {
    locale = 'en_US'
}

apply plugin: 'de.dfki.mary.lexicon-compiler'

compileLexicon {
    dependsOn processCmuDict
    allophonesFile = file('modules/en/us/lexicon/allophones.en_US.xml')
    lexiconFile = processCmuDict.destFile
    phoneMapping = [:]
    file('modules/en/synthesis/sampa2mrpa_en.map').eachLine { line ->
        (line =~ /(.+)<->(.+)/).each { match, sampa, mrpa ->
            phoneMapping[mrpa] = sampa
        }
    }
    phoneMapping << [0: '', 1: '', 2: '']
}

processResources {
    from unpackCmuDict, {
        include 'COPYING'
    }
}
